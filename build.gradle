import net.fabricmc.loom.task.RunClientTask
import net.fabricmc.loom.task.RunServerTask

import java.net.http.HttpClient
import java.net.http.HttpRequest
import java.net.http.HttpResponse

plugins {
    id("java-library")
    id("maven")
    id("maven-publish")
    id("fabric-loom") version("0.5-SNAPSHOT")
    id("com.jfrog.bintray") version("1.8.5")
}

final Map<String, String> repositoryMap = [
        "user11681"       : "https://dl.bintray.com/user11681/maven",
        "ladysnake"       : "https://dl.bintray.com/ladysnake/libs",
        "wrenchable"      : "https://dl.bintray.com/zundrel/wrenchable",
        "earthcomputer"   : "https://dl.bintray.com/earthcomputer/mods",
        "blamejared"      : "https://maven.blamejared.com",
        "dblsaiko"        : "https://maven.dblsaiko.net/",
        "jamieswhiteshirt": "https://maven.jamieswhiteshirt.com/libs-release",
        "buildcraft"      : "https://mod-buildcraft.com/maven",
        "halfof2"         : "https://raw.githubusercontent.com/Devan-Kerman/Devan-Repo/master",
        "artifactory"     : "https://server.bbkr.space/artifactory/libs-release",
        "jitpack"         : "https://jitpack.io"
]

final Map<String, String> artifactMap = [
        "api"                     : "net.fabricmc.fabric-api:fabric-api:+",
        "apibase"                 : "net.fabricmc.fabric-api:fabric-api-base:+",
        "apicommand"              : "net.fabricmc.fabric-api:fabric-command-api-v1:+",
        "apiscreenhandler"        : "net.fabricmc.fabric-api:fabric-screen-handler-api-v1:+",
        "apieventsinteraction"    : "net.fabricmc.fabric-api:fabric-events-interaction-v0:+",
        "apikeybindings"          : "net.fabricmc.fabric-api:fabric-key-binding-api-v1:+",
        "apilifecycleevents"      : "net.fabricmc.fabric-api:fabric-lifecycle-events-v1:+",
        "apinetworking"           : "net.fabricmc.fabric-api:fabric-networking-v0:+",
        "apirendererapi"          : "net.fabricmc.fabric-api:fabric-renderer-api-v1:+",
        "apirendererindigo"       : "net.fabricmc.fabric-api:fabric-renderer-indigo:+",
        "apiresourceloader"       : "net.fabricmc.fabric-api:fabric-resource-loader-v0:+",
        "apitagextensions"        : "net.fabricmc.fabric-api:fabric-tag-extensions-v0:+",
        "arrp"                    : "net.devtech:arrp:+",
        "astromine"               : "com.github.Chainmail-Studios:Astromine:1.8.1",
        "autoconfig"              : "me.sargunvohra.mcmods:autoconfig1u:+",
        "basicmath"               : "me.shedaniel.cloth:basic-math:+",
        "bason"                   : "user11681:bason:+",
        "cardinalcomponents"      : "io.github.onyxstudios.Cardinal-Components-API:Cardinal-Components-API:+",
        "cardinalcomponentsbase"  : "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-base:+",
        "cardinalcomponentsentity": "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-entity:+",
        "cardinalcomponentsitem"  : "io.github.onyxstudios.Cardinal-Components-API:cardinal-components-item:+",
        "cell"                    : "user11681:cell:+",
        "clothconfig"             : "me.shedaniel.cloth:config-2:+",
        "cottonresources"         : "io.github.cottonmc:cotton-resources:+",
        "commonformatting"        : "user11681:commonformatting:+",
        "dynamicentry"            : "user11681:dynamicentry:+",
        "fabricasm"               : "com.github.Chocohead:Fabric-ASM:master-SNAPSHOT",
        "fabricasmtools"          : "user11681:fabricasmtools:+",
        "gfh"                     : "net.devtech:grossfabrichacks:0.+",
        "invisiblelivingentities" : "user11681:invisiblelivingentities:+",
        "javaparser"              : "com.github.javaparser:javaparser-symbol-solver-core:+",
        "joor"                    : "org.jooq:joor-java-8:+",
        "junit"                   : "org.junit.jupiter:junit-jupiter:+",
        "liltaterreloaded"        : "com.github.Yoghurt4C:LilTaterReloaded:fabric-1.16-SNAPSHOT",
        "limitless"               : "user11681:limitless:+",
        "modmenu"                 : "io.github.prospector:modmenu:1.14.6+",
        "multiconnect"            : "net.earthcomputer:multiconnect:+:api",
        "narratoroff"             : "user11681:narratoroff:+",
        "noauth"                  : "user11681:noauth:+",
        "optional"                : "user11681:optional:+",
        "phormat"                 : "user11681:phormat:+",
        "projectfabrok"                     : "user11681:projectfabrok:+",
        "prone"                   : "user11681:prone:+",
        "reachentityattributes"   : "com.jamieswhiteshirt:reach-entity-attributes:+",
        "reflect"                 : "user11681:reflect:+",
        "rei"                     : "me.shedaniel:RoughlyEnoughItems:+",
        "shortcode"               : "user11681:shortcode:+",
        "toml4j"                  : "com.moandjiezana.toml:toml4j:+",
        "unsafe"                  : "net.gudenau.lib:unsafe:+",
]

String minecraftVersion = null
String yarnBuild = null

final HttpClient httpClient = HttpClient.newBuilder().version(HttpClient.Version.HTTP_2).build()

if (!minecraftVersion) {
    final HttpRequest request = HttpRequest.newBuilder().GET().uri(URI.create("https://meta.fabricmc.net/v2/versions/game")).build()
    final HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString())

    if (response.statusCode() == 200) {
        final String body = response.body()

        minecraftVersion = body.substring(body.indexOf(":")).find("(?<=\").+(?=\")")
    }
}

if (!yarnBuild) {
    final HttpRequest request = HttpRequest.newBuilder().GET().uri(URI.create("https://meta.fabricmc.net/v2/versions/yarn/${minecraftVersion}")).build()
    final HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString())

    if (response.statusCode() == 200) {
        final String body = response.body()

        yarnBuild = body.substring(body.indexOf("separator")).find("\\d+")
    }
}

allprojects {
    apply(plugin: "maven")
    apply(plugin: "fabric-loom")

    project.group = "user11681"

    dependencies {
        minecraft("com.mojang:minecraft:${minecraftVersion}")
        mappings("net.fabricmc:yarn:${minecraftVersion}+build.${yarnBuild}:v2")
        modImplementation("net.fabricmc:fabric-loader:+")
    }

    configurations {
        dev
    }

    loom {
        shareCaches = true
    }

    ext.javaVersion = 8
    ext.noSpam = true

    ext.repository = {final String... names ->
        for (final String name : names) {
            final String value = repositoryMap.get(name)

            repositories.maven {
                url = value == null ? name : value
            }
        }
    }

    ext.resolve = {final Object... dependencyNotation ->
        if (dependencyNotation.length == 1) {
            final String value = artifactMap.get(dependencyNotation[0].toString().replace("-", "").toLowerCase(Locale.ROOT))

            if (value != null) {
                return value
            }
        }

        return dependencyNotation
    }

    ext.local = {final String... name ->
        Dependency dependency = null

        dependencies {
            dependency = api(project(path: ":${name.join(":")}", configuration: "dev"))
        }

        return dependency
    }

    ext.localInclude = {final String... name ->
        Dependency dependency = null

        dependencies {
            dependency = include(local(name))
        }

        return dependency
    }

    ext.mod = {final Object... dependencyNotation ->
        return dependencies.modApi(resolve(dependencyNotation))
    }

    ext.modInclude = {final Object... dependencyNotation ->
        Dependency dependency = null

        dependencies {
            dependency = modApi(include(resolve(dependencyNotation)))
        }

        return dependency
    }

    ext.bloated = {final Object... dependencyNotation ->
        return dependencies.modApi(resolve(dependencyNotation)) {
            exclude(module: "fabric-api")
        }
    }

    ext.bloatedInclude = {final Object... dependencyNotation ->
        return dependencies.include(bloated(dependencyNotation))
    }
}

subprojects {
    apply(plugin: "java-library")
    apply(plugin: "maven-publish")
    apply(plugin: "com.jfrog.bintray")

    dependencies {
        testImplementation(resolve("junit"))

        testImplementation(sourceSets.main.output)
    }

    sourceSets {
        test.compileClasspath += main.compileClasspath
        test.runtimeClasspath += main.runtimeClasspath
    }

    jar {
        archiveClassifier.set("dev")

        from("LICENSE")
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        archiveClassifier.set("sources")

        from(sourceSets.main.allSource)
    }

    task runTestClient(type: RunClientTask) {
        classpath(sourceSets.test.runtimeClasspath)
    }

    task runTestServer(type: RunServerTask) {
        classpath(sourceSets.test.runtimeClasspath)
    }

    afterEvaluate {
        if (noSpam) {
            local("narratoroff")
            local("noauth")
        }

        tasks.withType(JavaCompile).configureEach {
            it.options.release.set(javaVersion)
            sourceCompatibility = javaVersion
            targetCompatibility = javaVersion
        }

        final String jarPath = "${project.buildDir}/libs/${project.name}-${project.version}-dev.jar"

        remapJar {
            input.set(file(jarPath))

            archiveName("${project.name}-${project.version}.jar")
        }

        artifacts {
            dev(file: file(jarPath), type: "jar", builtBy: jar)
        }

        processResources {
            inputs.property("version", project.version)

            from(sourceSets.main.resources.srcDirs) {
                include("fabric.mod.json")
                expand("version": project.version)
            }

            from(sourceSets.main.resources.srcDirs) {
                exclude("fabric.mod.json")
            }
        }

        tasks.withType(JavaCompile) {
            options.encoding = "UTF-8"
        }
    }

    bintray {
        user = System.getenv("BINTRAY_USER")
        key = System.getenv("BINTRAY_API_KEY")
        setPublications("maven")
        publish = true

        pkg {
            repo = "maven"
            name = project.name
            licenses = ["LGPL-3.0"]
            vcsUrl = "https://github.com/user11681/" + project.name + ".git"

            version {
                name = project.version
                released = new Date()
                githubRepo = "user11681/" + project.name
                issueTrackerUrl = "https://github.com/user11681/" + project.name + "/issues"
            }
        }
    }

    publishing {
        publications {
            maven(MavenPublication) {
                groupId(project.group)
                artifactId(project.name)
                version(project.version)

                artifact(remapJar) {
                    builtBy remapJar
                }

                artifact(sourcesJar) {
                    builtBy remapSourcesJar
                }
            }
        }

        repositories {
            mavenLocal()
        }
    }
}

dependencies {
    afterEvaluate {
        subprojects.each {
//            it = project(path: ":${it.name}", configuration: "dev");
//
//            api(it)
//            testImplementation(project("${it.name}:").sourceSets.test.output)
        }
    }
}